default_platform(:ios)

platform :ios do
  desc "Build and upload to TestFlight (internal) on push to main"
  lane :beta do
    require 'yaml'

    UI.message("Setting up App Store Connect API key")
    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY']
    )

    UI.message("Preparing CI keychain to avoid UI prompts")
    begin
      setup_ci
    rescue => e
      UI.important("setup_ci warning: #{e}")
    end

    UI.message("Syncing code signing via match (readonly in CI)")
    match(
      type: "appstore",
      app_identifier: [ENV['APP_BUNDLE_ID']],
      git_url: ENV['MATCH_GIT_URL'],
      readonly: true,
      api_key: api_key,
      keychain_name: "fastlane_tmp.keychain-db",
      keychain_password: ENV['KEYCHAIN_PASSWORD']
    )

    UI.message("Configuring manual code signing for Release build")
    automatic_code_signing(
      path: "Runner.xcodeproj",
      use_automatic_signing: false,
      team_id: ENV['APPLE_TEAM_ID']
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "Runner.xcodeproj",
      targets: ["Runner"],
      build_configurations: ["Release"],
      code_sign_identity: "Apple Distribution",
      profile_name: "match AppStore #{ENV['APP_BUNDLE_ID']}"
    )

    UI.message("Reading version from pubspec.yaml")
    pubspec = YAML.load_file(File.expand_path("../../pubspec.yaml", __dir__))
    version_str = pubspec['version']
    marketing_version = version_str.split('+').first

    latest = (latest_testflight_build_number(
      api_key: api_key,
      app_identifier: ENV['APP_BUNDLE_ID'],
      version: marketing_version
    ) rescue nil) || 0
    build_number = (latest.to_i + 1).to_s
    UI.message("Resolved marketing version=#{marketing_version} next build_number=#{build_number}")

    # Build and upload with a small retry if a concurrent build wins the race
    try_count = 0
    begin
      # Build the Flutter IPA (signed) with explicit build-name and build-number
      sh("flutter", "--version")
      sh("flutter", "pub", "get")
      sh("flutter", "build", "ipa", "--release", "--build-name", marketing_version, "--build-number", build_number)

      ipa_path = Dir[File.expand_path("../../build/ios/ipa/*.ipa", __dir__)].first
      UI.user_error!("IPA not found in build/ios/ipa") unless ipa_path

      UI.message("Uploading IPA to TestFlight (internal)")
      pilot(
        ipa: ipa_path,
        distribute_external: false,
        api_key: api_key,
        skip_submission: true,
        skip_waiting_for_build_processing: false
      )
    rescue => e
      if try_count == 0 && e.to_s.downcase.include?("build number")
        try_count += 1
        build_number = (build_number.to_i + 1).to_s
        UI.important("Retrying with incremented build_number=#{build_number} due to: #{e}")
        retry
      else
        raise
      end
    end
  end
end
